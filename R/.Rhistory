hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
knitr::opts_chunk$set(echo = TRUE)
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=c(0.5,0.5,0.5,0.5))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(1, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(1.5, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(2, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(2.5, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(5, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(3, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), mar=rep(3, 4))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), mar=rep(2.5, 4))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), mar=rep(2.5, 4))
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), mar=rep(2.5, 4), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(2.5, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(2.5, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=rep(3, 4))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=c(5, 2, 5, 2))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=c(5, 5, 5, 2))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=c(5, 5, 5, 5))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1, mar=c(5, 5, 2, 2))
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
box(bty="0")
# plot result
par(mfrow=c(2, 2), pty="m", cex.axis=1, cex.lab=1, cex.main=1)
# plot histogram
hist(x, breaks=50, freq=FALSE, ylim=c(0,2.5), xlim=c(-3, 1), bty='o')
lines(y, z, lty=2)
text(x=0, y=1, paste("Breaks=", 50))
# built-in kernel density estimator: density
library(MASS)   # unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator
h.opt <- MASS::ucv(x, nb=1000, lower=0.1)
fit.density <- stats::density(x, kernel="gaussian", bw=h.opt)
plot(fit.density, main="KDE with U-CV", ylim=c(0,2.5), xlim=c(-3, 1), xlab="x")
lines(y, z, lty=2)
text(x=-0.5, y=1, paste("Bandwidth=", round(h.opt,4)))
# Rodeo density
t <- seq(-3, 1, 0.01)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw, x=x))
fit.rodeo <- rodeo.local(t=t, x=x)
plot(t, fit.rodeo, "l", lty=1, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=2, lwd=1.5)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
# Rodeo h
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
# data
n <- 800
x1 <- rbeta(n, 1, 2) * 2 / 3 + rbeta(n, 10 ,10) / 3
x2 <- runif(n, 0, 1)
samples <- cbind(x1, x2)
p <- dim(samples)[2]
n <- dim(samples)[1]
# data
n <- 800
x1 <- rbeta(n, 1, 2) * 2 / 3 + rbeta(n, 10 ,10) / 3
x2 <- runif(n, 0, 1)
samples <- cbind(x1, x2)
p <- dim(samples)[2]
n <- dim(samples)[1]
# KDE2D
library(MASS)
fit.kde2d <- MASS::kde2d(x1, x2)
# Rodeo lacal multivariable version
# draw figures
library(plot3D)
xx <- as.matrix(fit.kde2d$x)
yy <- as.matrix(fit.kde2d$y)
zz <- as.matrix(fit.kde2d$z)
tmp <- plot3D::mesh(xx, yy)
xx <- tmp$x
yy <- tmp$y
surf3D(x=xx, y=yy, z=zz, xlab="relevant variable", ylab="irrelevant variable", zlab="Density", main="KDE2d", bty = "f", colkey = FALSE)
