idx <- seq(1,n); idx <- idx[-i]
lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y}) / (n-1)
}
tmp1 <- lapply(X=1:n, FUN=f.hat.remove_i)
idx <- seq(1,n); idx <- idx[-i]
lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
ker <- function(t, x, h){
# t is the estimated point
# x is data
# h is bandwidth
fhx <- 0
for (xx in x) {
fhx <- fhx + dnorm((t-xx)/h)
}
fhx / (h * length(x))
}
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})) / (n-1)
}
tmp1 <- lapply(X=1:n, FUN=f.hat.remove_i)
View(tmp1)
a = unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y}))
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
ker <- function(t, x, h){
# t is the estimated point
# x is data
# h is bandwidth
fhx <- 0
for (xx in x) {
fhx <- fhx + dnorm((t-xx)/h)
}
fhx / (h * length(x))
}
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
tmp1 <- lapply(X=1:n, FUN=f.hat.remove_i)
View(tmp1)
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
ker <- function(t, x, h){
# t is the estimated point
# x is data
# h is bandwidth
fhx <- 0
for (xx in x) {
fhx <- fhx + dnorm((t-xx)/h)
}
fhx / (h * length(x))
}
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
tmp1 <- unlist(lapply(X=1:n, FUN=f.hat.remove_i))
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- unlist(lapply(X=1:n, FUN=f.hat.remove_i)) / n
tmp2 <- unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) * unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) / n^2
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- unlist(lapply(X=1:n, FUN=f.hat.remove_i)) / n
tmp2 <- unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) * unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) / n^2
tmp3 <- unlist(lapply(X=1:n, FUN=f12.hat.remove_i)) * 2 / n
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- unlist(lapply(X=1:n, FUN=f.hat.remove_i)) / n
tmp2 <- unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) * unlist(lapply(X=1:n, FUN=f1.hat.remove_i)) / n^2
tmp3 <- unlist(lapply(X=1:n, FUN=f12.hat.remove_i)) * 2 / n
I <- tmp1 + tmp2 - tmp3
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- mean(unlist(lapply(X=1:n, FUN=f.hat.remove_i)))
tmp2 <- mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i))) * mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i)))
tmp3 <- mean(unlist(lapply(X=1:n, FUN=f12.hat.remove_i))) * 2
I <- tmp1 + tmp2 - tmp3
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- mean(unlist(lapply(X=1:n, FUN=f.hat.remove_i)))
tmp2 <- mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i))) * mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i)))
tmp3 <- mean(unlist(lapply(X=1:n, FUN=f12.hat.remove_i))) * 2
I <- tmp1 + tmp2 - tmp3
cat('We get I.hat = ', I,'\n')
ii
ii=1
(1:n)[-ii]
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- mean(unlist(lapply(X=1:n, FUN=f.hat.remove_i)))
tmp2 <- mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i))) * mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i)))
tmp3 <- mean(unlist(lapply(X=1:n, FUN=f12.hat.remove_i))) * 2
I <- tmp1 + tmp2 - tmp3
cat('We get I.hat = ', I,'\n')
tmp <- 0
for (ii in 1:n) {
for (jj in (1:n)[-ii]) {
tmp <- tmp + (dnorm((dat[ii,1]-dat[jj,1])/h.x))^2 * (dnorm((dat[ii,2]-dat[jj,2])/h.y))^2
}
}
sigma.sq <- 2 / n^2 / h.x / h.y * tmp
T <- n * sqrt(h.x*h.y) * I / sigma.sq
cat('We get T = ', T,'\n')
sigma.sq
2 / n^2 / h.x / h.y
tmp
data('faithful')
dat <- data.matrix(faithful)
n <- dim(dat)[1]
h.x <- h.y <- n^(-1/5)
f.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) * dnorm((dat[jj,2]-dat[i,2])/h.y) / h.x / h.y})))
}
f1.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x })))
}
f2.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
f12.hat.remove_i <- function(i){
idx <- seq(1,n); idx <- idx[-i]
mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,1]-dat[i,1])/h.x) / h.x }))) * mean(unlist(lapply(X=idx, FUN=function(jj){dnorm((dat[jj,2]-dat[i,2])/h.y) / h.y})))
}
tmp1 <- mean(unlist(lapply(X=1:n, FUN=f.hat.remove_i)))
tmp2 <- mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i))) * mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i)))
tmp3 <- mean(unlist(lapply(X=1:n, FUN=f12.hat.remove_i))) * 2
I <- tmp1 + tmp2 - tmp3
cat('We get I.hat = ', I,'\n')
tmp <- 0
for (ii in 1:n) {
for (jj in (1:n)[-ii]) {
tmp <- tmp + (dnorm((dat[ii,1]-dat[jj,1])/h.x))^2 * (dnorm((dat[ii,2]-dat[jj,2])/h.y))^2
}
}
sigma.sq <- 2 * tmp / n^2 / h.x / h.y
T <- n * sqrt(h.x*h.y) * I / sqrt(sigma.sq)
cat('Statistic T = ', T,'\n')
cov(dat)
cov(scale(dat))
chisq.test(dat[,1], dat[,2])
fisher.test(dat[,1], dat[,2])
fisher.test(dat[,1], dat[,2], simulate.p.value=TRUE)
knitr::opts_chunk$set(echo = TRUE)
Sig <- cov(dat)
H.plug_in <- diag(diag(sqrt(Sig))) * n^(-1/6) * (4 / 6)^(1/6)
H.scott <- diag(diag(sqrt(Sig))) * n^(-1/6)
svd_dat <- svd(Sig)
H.g_scott <- svd_dat$u %*% diag(sqrt(svd_dat$d)) %*% t(svd_dat$v) * n^(-1/6)
H.g_scott
H.scott
H.plug_in
h.x <- H.scott[1,1]; h.y <- H.scott[2,2]
tmp1 <- mean(unlist(lapply(X=1:n, FUN=f.hat.remove_i)))
tmp2 <- mean(unlist(lapply(X=1:n, FUN=f1.hat.remove_i))) * mean(unlist(lapply(X=1:n, FUN=f2.hat.remove_i)))
tmp3 <- mean(unlist(lapply(X=1:n, FUN=f12.hat.remove_i))) * 2
I <- tmp1 + tmp2 - tmp3
cat('We get I.hat = ', I,'\n')
tmp <- 0
for (ii in 1:n) {
for (jj in (1:n)[-ii]) {
tmp <- tmp + (dnorm((dat[ii,1]-dat[jj,1])/h.x))^2 * (dnorm((dat[ii,2]-dat[jj,2])/h.y))^2
}
}
sigma.sq <- 2 * tmp / n^2 / h.x / h.y
T <- n * sqrt(h.x*h.y) * I / sqrt(sigma.sq)
cat('Statistic T = ', T,'\n')
knitr::opts_chunk$set(echo = TRUE)
n <- 200
lambda <- 2
x <- rnorm(n=n)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(exp(beta[1]+beta[2]*x))
n <- 200
lambda <- 2
x <- rnorm(n=n)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(exp(beta[1]+beta[2]*x))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(exp(beta[1]+beta[2]*x))
plot(x, y, '.')
n <- 200
lambda <- 2
x <- rnorm(n=n)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(exp(beta[1]+beta[2]*x))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, sd=10)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=10, sd=10)
beta <- c(1,2)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=10)
beta <- c(10,2)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=10)
beta <- c(10, 1)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=10)
beta <- c(20, 1)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=5)
beta <- c(20, 1)
epsilon <- rnorm(n=n)
y <- exp(beta[1]+beta[2]*x)
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=5)
beta <- c(20, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=5)
beta <- c(20, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=1/exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(2, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=1/exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(2, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(3, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 200
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(-5, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 400
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(-5, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
n <- 400
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(-10, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
install.packages("locfit")
library(locfit)
dat <- data.frame(x,y)
locfit(y~x, data=dat, family="exponential ", + deg=1, alpha=0.6)
dat <- data.frame(x,y)
locfit(y~x, data=dat, family="exponential ", deg=1, alpha=0.6)
# for (ii in 1:n) {
#   N <-
# }
plot(fit, band="g", get.data=T)
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="exponential ", deg=1, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="poisson ", deg=1, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="poisson ", deg=2, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
set.seed(1345)
n <- 400
lambda <- 2
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(-10, 1)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="poisson ", deg=2, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="gamma", deg=2, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
# likelihood function
lik <- function(y,beta) beta-exp(beta)*y
# Set bandwidth and evaluation grid
h <- 0.25
t <- seq(-3, 3, l = 501)
# Optimize the weighted log-likelihood explicitly
fitNlm <- sapply(t, function(t) {
K <- dnorm(x = t, mean = x, sd = h)
nlm(f = function(beta1) {
sum(K * (y * exp(beta1[1] + beta1[2] * (x - t)) - ( beta1[1] + beta1[2] * (x - t))))
}, p <- c(0, 0)
)$estimate[1]
})
# Compare fits
plot(t, 1/lambda(t),  type = "l", lwd = 2)
set.seed(1345)
n <- 400
x <- rnorm(n=n, mean=0, sd=1)
beta <- c(-10, 1)
lambda <- function(x) exp(beta[1]+beta[2]*x)
epsilon <- rnorm(n=n)
y <- unlist(lapply(1:n, function(ii) rexp(n=1, rate=exp(beta[1]+beta[2]*x[ii]))))
plot(x, y)
# likelihood function
lik <- function(y,beta) beta-exp(beta)*y
# Set bandwidth and evaluation grid
h <- 0.25
t <- seq(-3, 3, l = 501)
# Optimize the weighted log-likelihood explicitly
fitNlm <- sapply(t, function(t) {
K <- dnorm(x = t, mean = x, sd = h)
nlm(f = function(beta1) {
sum(K * (y * exp(beta1[1] + beta1[2] * (x - t)) - ( beta1[1] + beta1[2] * (x - t))))
}, p <- c(0, 0)
)$estimate[1]
})
# Compare fits
plot(t, 1/lambda(t),  type = "l", lwd = 2)
lines(t, exp(-fitNlm), col = 2, lty = 2) # inverse of link function g
points(x, y)
# using locfit package to generate local likelihood method
library(locfit)
dat <- data.frame(x,y)
fit <- locfit(y~x, data=dat, family="gamma", deg=2, alpha=0.6)
plot(fit, band="g", get.data=T)
# for (ii in 1:n) {
#   N <-
# }
